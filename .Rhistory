tracks_SS_18 <- joinTable(trk_whales18, BB_18, TO_18)
tracks_SS_19 <- joinTable(trk_whales19, BB_19, TO_19)
tracks_SS_20 <- joinTable(trk_whales20, BB_20, TO_20)
tracks_SS_21 <- joinTable(trk_whales21, BB_21, TO_21)
tracks_SS_22 <- joinTable(trk_whales22, BB_22, TO_22)
tracks_SS_23 <- joinTable(trk_whales23, BB_23, TO_23)
ais_near_07 <- readLocalAIS(tracks_SS_07, aisDir="D:/AIS/AIS_West", distance=10e3) %>%
filter(vesselLength >= 100)  #remove vessels under 100m in length
View(ais_near_07)
gpsClose <- addAIS(tracks_SS_07, ais_near_07, interpType = 'close', interpTime = 120)
## Using PRE-ROUNDED dataset to try out
ais_near_raw7 <- readLocalAIS(tracks7, aisDir = "D:/AIS/AIS_West", distance=10e3) %>%
filter(vesselLength >= 100)  #remove vessels under 100m in length
## code to prepare in `tracks` dataset goes here
library(tidyverse)
# Load raw rda file
load("data-raw/CCES2018_DriftTracks_Modified_03Nov2022.rda")
# Read in tracks, filter out lost buoys (1,2,3,5,6,9,11) and corrupted buoys (4,17)
tracks <- AllTracks %>%
dplyr::select(-dist, -speed) %>%
mutate(dateTime = round_date(.$dateTime, "20 minutes")) %>% # round to nearest 20 minutes, will create duplicated in the data
filter(!station %in% c('1','2','3','4','5','6','9','11', '17')) %>%
rename(Longitude = long,              # Need these columns to specifically say this for ERDDAP matching
Latitude = lat,
UTC = dateTime)
tracks <- tracks[!duplicated(tracks[c('UTC', 'station')]),]    # Remove duplicates
# Save as RDS
saveRDS(tracks, 'data/tracks.rda')
# Filter by buoy
#tracks_08 <- tracks %>% dplyr::filter(station == "8")
track4 <- AllTracks %>% dplyr::filter(station == "4")
### Option to create AllTracks before rounding to nearest 20 min, for AIS
tracks2 <- AllTracks %>%
dplyr::select(-dist, -speed) %>%
filter(!station %in% c('1','2','3','4','5','6','9','11', '17')) %>%
rename(Longitude = long,            # Need these columns to specifically say this for ERDDAP matching
Latitude = lat,
UTC = dateTime)
tracks7 <- tracks2 %>%
filter(station== 7)
## Using PRE-ROUNDED dataset to try out
ais_near_raw7 <- readLocalAIS(tracks7, aisDir = "D:/AIS/AIS_West", distance=10e3) %>%
filter(vesselLength >= 100)  #remove vessels under 100m in length
View(gpsClose_raw7)
gpsClose_raw7 <- addAIS(tracks7, ais_near_raw7, interpType = 'close', interpTime = 120)
View(gpsClose_raw7)
View(ais_near_raw7
)
ggplot() +
geom_path(data=tracks_SS_07, aes(x=Longitude, y=Latitude), col='black') +
geom_path(data=ais_near_07, aes(x=Longitude, y=Latitude, group=factor(MMSI), col=inDist)) +
xlim(min(tracks_SS_07$Longitude), max(tracks_SS_07$Longitude)) +
ylim(min(tracks_SS_07$Latitude), max(tracks_SS_07$Latitude))
baseGps <- ggplot(data=tracks7, aes(x=Longitude, y=Latitude), col='black') +
geom_path() +
xlim(min(tracks7$Longitude), max(tracks7$Longitude)) +
ylim(min(tracks7$Latitude), max(tracks7$Latitude))
baseGps + geom_path(data=gpsClose_raw7, aes(x=shipLong, y=shipLat, group=factor(MMSI), color=shipDist < 10e3)) +
geom_point(data=gpsClose_raw7, aes(x=shipLong, y=shipLat, color=shipDist < 10e3), size = 0.1) +
ggtitle('CloseInterp')
#  ^^This seems to show too many vessels?
# Viewing only ships within 10 km of buoys.
View(gpsClose %>% filter(shipDist < 10e3))
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
ftlist <- dir("data/", recursive=TRUE, full.names=TRUE, pattern="fulltrack")
for (ft in ftlist) {
df <- readRDS(ft)
assign(paste0("fulltrack", substr(ft, 15, 16)), df)
}
allDrifts <- rbind(fulltrack07, fulltrack08, fulltrack10, fulltrack12, fulltrack13, fulltrack14,
fulltrack16, fulltrack18, fulltrack19, fulltrack20, fulltrack21, fulltrack22, fulltrack23)
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
allDrifts$ZcPresence<-factor(ifelse(allDrifts$species=='ZC',1,0))
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=300, sampsize=sampsizeZC, proximity=FALSE)
RF.model.ZC
#Evaluate RF models
#Create a PDF of summary plots
pdf(paste(Dep,"_",string.covars.used,".pdf"), width=14, height=10) ## Not working?
round(importance(RF.model.ZC),3) #ranking of importance for each variable
plotImportance(RF.model.ZC) #visualize importance
plotTrace(RF.model.ZC)   #model stability w/number of trees (this should be flat!)
plotImpPreds(RF.model.ZC, DF.modelZC, "ZcPresence")  #distribution of predictors
plotPredictedProbs(RF.model.ZC)
#plotProximity(RF.model.ZC) ## Not working??
dev.off()
#Confusion matrix
confusionMatrix(RF.model.ZC)
#Save a Rdata file with the dataframe & RF model
save.image(paste(Dep,"_", string.covars.used, ".RData", sep="")) ## Not working??
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
allDrifts$ZcPresence<-factor(ifelse(allDrifts$species=='ZC',1,0))
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=1000, sampsize=sampsizeZC, proximity=FALSE)
RF.model.ZC
#Evaluate RF models
#Create a PDF of summary plots
pdf(paste(Dep,"_",string.covars.used,".pdf"), width=14, height=10) ## Not working?
round(importance(RF.model.ZC),3) #ranking of importance for each variable
plotImportance(RF.model.ZC) #visualize importance
plotTrace(RF.model.ZC)   #model stability w/number of trees (this should be flat!)
plotImpPreds(RF.model.ZC, DF.modelZC, "ZcPresence")  #distribution of predictors
plotPredictedProbs(RF.model.ZC)
#plotProximity(RF.model.ZC) ## Not working??
dev.off()
#Confusion matrix
confusionMatrix(RF.model.ZC)
#Save a Rdata file with the dataframe & RF model
save.image(paste(Dep,"_", string.covars.used, ".RData", sep="")) ## Not working??
library(PAMscapes)
library(tidyverse)
## code to assemble clean dataframe for each buoy.
## Prerequisites include whales.R, tracks.R, soundscape_metrics.R.
# libraries ##########
library(tidyverse)
library(lubridate)
library(here)
# set up #####
# Set system time zone to UTC
Sys.setenv(TZ='UTC')
here()
######################
# Join TRACKS with WHALES (Start Rmd here)
######################
tracks <- readRDS('data/tracks.rda')
whales <- readRDS('data/whales.rda')
# Join tracks and whales
trk_whale <- left_join(tracks, whales, by = c("station","UTC"))
# Remove duplicates
trk_whale <- trk_whale[!duplicated(trk_whale[c('UTC', 'station')]),]
###############
# Filter whales by drift
##############
# Create list of drifts
d <- unique(trk_whale$station)
# Filter by drifts and assign to new variable
for (drift in d) {
assign(paste0("trk_whales", drift), trk_whale %>% dplyr::filter(station == drift))
}
# Results in trk_whales7, trk_whales8... objects
##############################################################
# Joining tracks with soundscape metrics with whale detections
##############################################################
## Make list of rda files to read in
iilist <- c("BB_07", "BB_08", "BB_10", "BB_12", "BB_13", "BB_14", "BB_16",
"BB_18", "BB_19", "BB_20", "BB_21", "BB_22", "BB_23", "TO_07",
"TO_08", "TO_10", "TO_12", "TO_13", "TO_14", "TO_16", "TO_18",
"TO_19", "TO_20", "TO_21", "TO_22", "TO_23")
## Read in rda files and assign to object
for (ii in iilist) {
dta <- readRDS(paste0('data/', ii, '.rda'))
assign(ii, dta)
}
# Make function to join whales + tracks, broadband, and TOL soundscape metrics and edit columns
joinTable <- function(w, s, t) {
left_join(w, s, by = join_by(closest("UTC" <= "dateTime"))) %>%     # join tracks with broadband metrics
.[!duplicated(.['UTC']),] %>%                                     # removes duplicates
left_join(., t, by = join_by(closest("UTC" <= "dateTime"))) %>%    # joins tracks/BB with TOL metrics
.[!duplicated(.['UTC']),] %>%                                     # removes duplicates formed from new join
mutate(Wpresence = if_else(is.na(nClicks), 0, 1)) %>%    # Add column to specify whale presence (1) or absence (0)
dplyr::select(UTC, spotID, Latitude, Longitude, station,
`BB_20-24000`,TOL_63, TOL_125, TOL_1600,
TOL_2000, TOL_3150, TOL_5000, TOL_8000,
TOL_10000, TOL_12500, TOL_20000, species, Wpresence)
}
# join whales detections + soundscape metrics (BB and TO) to each buoy track
# How can I loop this?
tracks_SS_07 <- joinTable(trk_whales7, BB_07, TO_07)
tracks_SS_08 <- joinTable(trk_whales8, BB_08, TO_08)
tracks_SS_10 <- joinTable(trk_whales10, BB_10, TO_10)
tracks_SS_12 <- joinTable(trk_whales12, BB_12, TO_12)
tracks_SS_13 <- joinTable(trk_whales13, BB_13, TO_13)
tracks_SS_14 <- joinTable(trk_whales14, BB_14, TO_14)
tracks_SS_16 <- joinTable(trk_whales16, BB_16, TO_16)
tracks_SS_18 <- joinTable(trk_whales18, BB_18, TO_18)
tracks_SS_19 <- joinTable(trk_whales19, BB_19, TO_19)
tracks_SS_20 <- joinTable(trk_whales20, BB_20, TO_20)
tracks_SS_21 <- joinTable(trk_whales21, BB_21, TO_21)
tracks_SS_22 <- joinTable(trk_whales22, BB_22, TO_22)
tracks_SS_23 <- joinTable(trk_whales23, BB_23, TO_23)
ais_near_07 <- readLocalAIS(tracks_SS_07, aisDir="D:/AIS/AIS_West", distance=10e3) %>%
filter(vesselLength >= 100)  #remove vessels under 100m in length
View(ais_near_07)
gpsClose <- addAIS(tracks_SS_07, ais_near_07, interpType = 'close', interpTime = 120)
View(gpsClose)
View(gpsNone)
gpsNone <- addAIS(tracks_SS_07, ais_near_07, interpType = 'none')
View(gpsNone)
gpsAll <- addAIS(tracks_SS_07, ais_near_07, interpType = 'all', interpTime = 120)
View(gpsAll)
# Viewing only ships within 10 km of buoys.
View(gpsClose %>% filter(shipDist < 10e3))
View(gpsClose)
?filter
gpsClose %>% dplyr::filter(!grepl("2018-09-03",UTC))
View(gpsClose %>% dplyr::filter(!grepl("2018-09-03",UTC)))
View(gpsClose %>% dplyr::filter(grepl("2018-09-03",UTC)))
View(gpsNone %>% dplyr::filter(grepl("2018-09-03",UTC)))
View(tracks_SS_07)
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
allDrifts$ZcPresence<-factor(ifelse(allDrifts$species=='ZC',1,0))
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=1000, sampsize=sampsizeZC, proximity=FALSE)
RF.model.ZC
#Evaluate RF models
#Create a PDF of summary plots
pdf(paste(Dep,"_",string.covars.used,".pdf"), width=14, height=10) ## Not working?
round(importance(RF.model.ZC),3) #ranking of importance for each variable
plotImportance(RF.model.ZC) #visualize importance
plotTrace(RF.model.ZC)   #model stability w/number of trees (this should be flat!)
plotImpPreds(RF.model.ZC, DF.modelZC, "ZcPresence")  #distribution of predictors
plotPredictedProbs(RF.model.ZC)
#plotProximity(RF.model.ZC) ## Not working??
dev.off()
#Confusion matrix
confusionMatrix(RF.model.ZC)
#Save a Rdata file with the dataframe & RF model
save.image(paste(Dep,"_", string.covars.used, ".RData", sep="")) ## Not working??
View(allDrifts)
allDrifts
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
#covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
#                      'sst_mean','dist2slope','depth',
#                     'chlorophyll_mean','mldDepth'))
#more parameters
covariate.list<-list(c('ZcPresence','BB_20.24000','TOL_63','TOL_125','TOL_2000','TOL_5000',
'TOL_20000', 'curl_mean', 'bathy_slope', 'ssh_mean',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth', 'mldTemp', 'ttDepth',
'ttTemp', 'temp400', 'sal400'))
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
allDrifts$ZcPresence<-factor(ifelse(allDrifts$species=='ZC',1,0))
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
#covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
#                      'sst_mean','dist2slope','depth',
#                     'chlorophyll_mean','mldDepth'))
#more parameters
covariate.list<-list(c('ZcPresence','BB_20.24000','TOL_63','TOL_125','TOL_2000','TOL_5000',
'TOL_20000', 'curl_mean', 'bathy_slope', 'ssh_mean',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth', 'mldTemp', 'ttDepth',
'ttTemp', 'temp400', 'sal400'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=1000, sampsize=sampsizeZC, proximity=FALSE)
RF.model.ZC
#Evaluate RF models
#Create a PDF of summary plots
pdf(paste(Dep,"_",string.covars.used,".pdf"), width=14, height=10)
round(importance(RF.model.ZC),3) #ranking of importance for each variable
plotImportance(RF.model.ZC) #visualize importance
plotTrace(RF.model.ZC)   #model stability w/number of trees (this should be flat!)
plotImpPreds(RF.model.ZC, DF.modelZC, "ZcPresence")  #distribution of predictors
plotPredictedProbs(RF.model.ZC)
#plotProximity(RF.model.ZC) ## Not working??
dev.off()
#Confusion matrix
confusionMatrix(RF.model.ZC)
#Save a Rdata file with the dataframe & RF model
save.image(paste(Dep,"_", string.covars.used, ".RData", sep="")) ## Not working??
## code to prepare `whales` dataset here
library(tidyverse)
library(sf)
# Load raw RDA file
#load("data-raw/CCES2018_BW_Detections.rda")             # Beaked whales only
load("data-raw/CCES2018_BW_and_PM_Detections.rda")       # Beaked + sperm whales
# Change EventInfo object name to "whales" and edit columns
whales <- EventInfo %>%
dplyr::select(-Project, -UID, -Id) %>%            # remove unnecessary columns
subset(species!= "?BW") %>%                    # remove rows containing ?BW and BW
subset(species!= "BW") %>%
mutate(dateTimeRound = round_date(.$StartTime, "20 minutes")) %>%   # Round to nearest 20 min
rename(station = Deployment)                    # Rename for common join column name next
## NEED TO CHANGE STATION 15 TO STATION 14 HERE. Drift 15 and 14 are the same.
whales$station[whales$station == 15] <- 14
# Create common UTC field and remove unnecessary fields
whales <- left_join(whales, tracks, by = join_by(station, closest("dateTimeRound" <= UTC))) %>%
dplyr::select(-Latitude.y, -Longitude.y, -spotID, -minNumber, -maxNumber, -bestNumber)
# Whales data as sf
Wsf <- whales %>% st_as_sf(coords = c("Longitude.x","Latitude.x"), crs=4326)   # whales as sf
# Save object
saveRDS(whales, 'data/whales.rda')
# Number of rows per station
nrow(whales[whales$station==12,])
View(EventInfo)
# Viewing only ships within 10 km of buoys.
close2ships7 <- gpsClose %>% filter(shipDist < 10e3)
View(left_join(whales, close2ships7,
by = join_by(station, closest("dateTimeRound" <= UTC))))
nrow(whales)
View(whales)
View(left_join(close2ships7, whales
by = join_by(station, closest("dateTimeRound" <= UTC))))
View(left_join(close2ships7, whales,
by = join_by(station, closest("dateTimeRound" <= UTC))))
View(left_join(close2ships7, whales,
by = join_by(station, closest(UTC <= "dateTimeRound"))))
View(left_join(gpsClose, whales,
by = join_by(station, closest(UTC <= "dateTimeRound"))))
View(left_join(gpsClose, whales,
by = join_by(station, closest(UTC))))
View(left_join(gpsClose, whales,
by = join_by(station, closest(UTC <= UTC))))
ais <- readLocalAIS(gps, aisDir=here('AIS_West'), distance=10e3)
gps <- read_csv(here('devel/ADRIFT_006_GPS.csv'))
ftlist <- dir("data/", recursive=TRUE, full.names=TRUE, pattern="fulltrack")
for (ft in ftlist) {
df <- readRDS(ft)
assign(paste0("fulltrack", substr(ft, 15, 16)), df)
}
allDrifts <- rbind(fulltrack07, fulltrack08, fulltrack10, fulltrack12, fulltrack13, fulltrack14,
fulltrack16, fulltrack18, fulltrack19, fulltrack20, fulltrack21, fulltrack22, fulltrack23)
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
allDrifts$ZcPresence<-factor(ifelse(allDrifts$species=='ZC',1,0))
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
#covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
#                      'sst_mean','dist2slope','depth',
#                     'chlorophyll_mean','mldDepth'))
#more parameters
covariate.list<-list(c('ZcPresence','BB_20.24000','TOL_63','TOL_125','TOL_2000','TOL_5000',
'TOL_20000', 'curl_mean', 'bathy_slope', 'ssh_mean',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth', 'mldTemp', 'ttDepth',
'ttTemp', 'temp400', 'sal400'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=10000, sampsize=sampsizeZC, proximity=FALSE)
RF.model.ZC
#Evaluate RF models
#Create a PDF of summary plots
pdf(paste(Dep,"_",string.covars.used,".pdf"), width=14, height=10)
round(importance(RF.model.ZC),3) #ranking of importance for each variable
plotImportance(RF.model.ZC) #visualize importance
plotTrace(RF.model.ZC)   #model stability w/number of trees (this should be flat!)
plotImpPreds(RF.model.ZC, DF.modelZC, "ZcPresence")  #distribution of predictors
plotPredictedProbs(RF.model.ZC)
#plotProximity(RF.model.ZC) ## Not working??
dev.off()
#Confusion matrix
confusionMatrix(RF.model.ZC)
#Save a Rdata file with the dataframe & RF model
save.image(paste(Dep,"_", string.covars.used, ".RData", sep="")) ## Not working??
sampsizeZC
?balancedSampsize
#Playing around with no balanced sample size
RF.model.ZC.nosamp <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=10000, proximity=FALSE)
