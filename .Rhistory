#more parameters
covariate.list<-list(c('ZcPresence','BB_20.24000','TOL_63','TOL_125','TOL_2000','TOL_5000',
'TOL_20000', 'curl_mean', 'bathy_slope', 'ssh_mean',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth', 'mldTemp', 'ttDepth',
'ttTemp', 'temp400', 'sal400'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=1000, sampsize=sampsizeZC, proximity=FALSE)
RF.model.ZC
#Evaluate RF models
#Create a PDF of summary plots
pdf(paste(Dep,"_",string.covars.used,".pdf"), width=14, height=10)
round(importance(RF.model.ZC),3) #ranking of importance for each variable
plotImportance(RF.model.ZC) #visualize importance
plotTrace(RF.model.ZC)   #model stability w/number of trees (this should be flat!)
plotImpPreds(RF.model.ZC, DF.modelZC, "ZcPresence")  #distribution of predictors
plotPredictedProbs(RF.model.ZC)
#plotProximity(RF.model.ZC) ## Not working??
dev.off()
#Confusion matrix
confusionMatrix(RF.model.ZC)
#Save a Rdata file with the dataframe & RF model
save.image(paste(Dep,"_", string.covars.used, ".RData", sep="")) ## Not working??
## code to prepare `whales` dataset here
library(tidyverse)
library(sf)
# Load raw RDA file
#load("data-raw/CCES2018_BW_Detections.rda")             # Beaked whales only
load("data-raw/CCES2018_BW_and_PM_Detections.rda")       # Beaked + sperm whales
# Change EventInfo object name to "whales" and edit columns
whales <- EventInfo %>%
dplyr::select(-Project, -UID, -Id) %>%            # remove unnecessary columns
subset(species!= "?BW") %>%                    # remove rows containing ?BW and BW
subset(species!= "BW") %>%
mutate(dateTimeRound = round_date(.$StartTime, "20 minutes")) %>%   # Round to nearest 20 min
rename(station = Deployment)                    # Rename for common join column name next
## NEED TO CHANGE STATION 15 TO STATION 14 HERE. Drift 15 and 14 are the same.
whales$station[whales$station == 15] <- 14
# Create common UTC field and remove unnecessary fields
whales <- left_join(whales, tracks, by = join_by(station, closest("dateTimeRound" <= UTC))) %>%
dplyr::select(-Latitude.y, -Longitude.y, -spotID, -minNumber, -maxNumber, -bestNumber)
# Whales data as sf
Wsf <- whales %>% st_as_sf(coords = c("Longitude.x","Latitude.x"), crs=4326)   # whales as sf
# Save object
saveRDS(whales, 'data/whales.rda')
# Number of rows per station
nrow(whales[whales$station==12,])
View(EventInfo)
# Viewing only ships within 10 km of buoys.
close2ships7 <- gpsClose %>% filter(shipDist < 10e3)
View(left_join(whales, close2ships7,
by = join_by(station, closest("dateTimeRound" <= UTC))))
nrow(whales)
View(whales)
View(left_join(close2ships7, whales
by = join_by(station, closest("dateTimeRound" <= UTC))))
View(left_join(close2ships7, whales,
by = join_by(station, closest("dateTimeRound" <= UTC))))
View(left_join(close2ships7, whales,
by = join_by(station, closest(UTC <= "dateTimeRound"))))
View(left_join(gpsClose, whales,
by = join_by(station, closest(UTC <= "dateTimeRound"))))
View(left_join(gpsClose, whales,
by = join_by(station, closest(UTC))))
View(left_join(gpsClose, whales,
by = join_by(station, closest(UTC <= UTC))))
ais <- readLocalAIS(gps, aisDir=here('AIS_West'), distance=10e3)
gps <- read_csv(here('devel/ADRIFT_006_GPS.csv'))
ftlist <- dir("data/", recursive=TRUE, full.names=TRUE, pattern="fulltrack")
for (ft in ftlist) {
df <- readRDS(ft)
assign(paste0("fulltrack", substr(ft, 15, 16)), df)
}
allDrifts <- rbind(fulltrack07, fulltrack08, fulltrack10, fulltrack12, fulltrack13, fulltrack14,
fulltrack16, fulltrack18, fulltrack19, fulltrack20, fulltrack21, fulltrack22, fulltrack23)
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
allDrifts$ZcPresence<-factor(ifelse(allDrifts$species=='ZC',1,0))
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
#covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
#                      'sst_mean','dist2slope','depth',
#                     'chlorophyll_mean','mldDepth'))
#more parameters
covariate.list<-list(c('ZcPresence','BB_20.24000','TOL_63','TOL_125','TOL_2000','TOL_5000',
'TOL_20000', 'curl_mean', 'bathy_slope', 'ssh_mean',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth', 'mldTemp', 'ttDepth',
'ttTemp', 'temp400', 'sal400'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=10000, sampsize=sampsizeZC, proximity=FALSE)
RF.model.ZC
#Evaluate RF models
#Create a PDF of summary plots
pdf(paste(Dep,"_",string.covars.used,".pdf"), width=14, height=10)
round(importance(RF.model.ZC),3) #ranking of importance for each variable
plotImportance(RF.model.ZC) #visualize importance
plotTrace(RF.model.ZC)   #model stability w/number of trees (this should be flat!)
plotImpPreds(RF.model.ZC, DF.modelZC, "ZcPresence")  #distribution of predictors
plotPredictedProbs(RF.model.ZC)
#plotProximity(RF.model.ZC) ## Not working??
dev.off()
#Confusion matrix
confusionMatrix(RF.model.ZC)
#Save a Rdata file with the dataframe & RF model
save.image(paste(Dep,"_", string.covars.used, ".RData", sep="")) ## Not working??
sampsizeZC
?balancedSampsize
#Playing around with no balanced sample size
RF.model.ZC.nosamp <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=10000, proximity=FALSE)
ftlist <- dir("data/", recursive=TRUE, full.names=TRUE, pattern="fulltrack")
for (ft in ftlist) {
df <- readRDS(ft)
assign(paste0("fulltrack", substr(ft, 15, 16)), df)
}
allDrifts <- rbind(fulltrack07, fulltrack08, fulltrack10, fulltrack12, fulltrack13, fulltrack14,
fulltrack16, fulltrack18, fulltrack19, fulltrack20, fulltrack21, fulltrack22, fulltrack23)
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
allDrifts$ZcPresence<-factor(ifelse(allDrifts$species=='ZC',1,0))
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
#covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
#                      'sst_mean','dist2slope','depth',
#                     'chlorophyll_mean','mldDepth'))
#more parameters
covariate.list<-list(c('ZcPresence','BB_20.24000','TOL_63','TOL_125','TOL_2000','TOL_5000',
'TOL_20000', 'curl_mean', 'bathy_slope', 'ssh_mean',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth', 'mldTemp', 'ttDepth',
'ttTemp', 'temp400', 'sal400'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=20000, sampsize=sampsizeZC, proximity=FALSE)
# Viewing only ships within 10 km of buoys.
close2ships7 <- gpsClose %>% filter(shipDist < 10e3)
View(fulltrack07)
ais_near_07 <- readLocalAIS(fulltrack07, aisDir="D:/AIS/AIS_West", distance=10e3) %>%
filter(vesselLength >= 100)  #remove vessels under 100m in length
library(PAMscapes)
library(tidyverse)
ais_near_07 <- readLocalAIS(fulltrack07, aisDir="D:/AIS/AIS_West", distance=10e3) %>%
filter(vesselLength >= 100)  #remove vessels under 100m in length
gc()
remove.packages("zoo")
remove.packages("adehabitatMA")
remove.packages("dslabs")
remove.packages("geojsonio")
remove.packages("palmerpenguins")
remove.packages("RgoogleMaps")
remove.packages("rnaturalearthhires")
gc()
ftlist <- dir("data/", recursive=TRUE, full.names=TRUE, pattern="fulltrack")
for (ft in ftlist) {
df <- readRDS(ft)
assign(paste0("fulltrack", substr(ft, 15, 16)), df)
}
allDrifts <- rbind(fulltrack07, fulltrack08, fulltrack10, fulltrack12, fulltrack13, fulltrack14,
fulltrack16, fulltrack18, fulltrack19, fulltrack20, fulltrack21, fulltrack22, fulltrack23)
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
allDrifts$ZcPresence<-factor(ifelse(allDrifts$species=='ZC',1,0))
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
#covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
#                      'sst_mean','dist2slope','depth',
#                     'chlorophyll_mean','mldDepth'))
#more parameters
covariate.list<-list(c('ZcPresence','BB_20.24000','TOL_63','TOL_125','TOL_2000','TOL_5000',
'TOL_20000', 'curl_mean', 'bathy_slope', 'ssh_mean',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth', 'mldTemp', 'ttDepth',
'ttTemp', 'temp400', 'sal400'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=15000, sampsize=sampsizeZC, proximity=FALSE)
gc()
ftlist <- dir("data/", recursive=TRUE, full.names=TRUE, pattern="fulltrack")
for (ft in ftlist) {
df <- readRDS(ft)
assign(paste0("fulltrack", substr(ft, 15, 16)), df)
}
allDrifts <- rbind(fulltrack07, fulltrack08, fulltrack10, fulltrack12, fulltrack13, fulltrack14,
fulltrack16, fulltrack18, fulltrack19, fulltrack20, fulltrack21, fulltrack22, fulltrack23)
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
allDrifts$ZcPresence<-factor(ifelse(allDrifts$species=='ZC',1,0))
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
#covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
#                      'sst_mean','dist2slope','depth',
#                     'chlorophyll_mean','mldDepth'))
#more parameters
covariate.list<-list(c('ZcPresence','BB_20.24000','TOL_63','TOL_125','TOL_2000','TOL_5000',
'TOL_20000', 'curl_mean', 'bathy_slope', 'ssh_mean',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth', 'mldTemp', 'ttDepth',
'ttTemp', 'temp400', 'sal400'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=11000, sampsize=sampsizeZC, proximity=FALSE)
RF.model.ZC
pdf(paste(Dep,"_",string.covars.used,".pdf"), width=14, height=10)
round(importance(RF.model.ZC),3) #ranking of importance for each variable
plotImportance(RF.model.ZC) #visualize importance
plotTrace(RF.model.ZC)   #model stability w/number of trees (this should be flat!)
plotImpPreds(RF.model.ZC, DF.modelZC, "ZcPresence")  #distribution of predictors
plotPredictedProbs(RF.model.ZC)
#plotProximity(RF.model.ZC) ## Not working??
dev.off()
#Confusion matrix
confusionMatrix(RF.model.ZC)
#Save a Rdata file with the dataframe & RF model
save.image(paste(Dep,"_", string.covars.used, ".RData", sep=""))
RF.model.ZC_test <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=10, sampsize=sampsizeZC, proximity=FALSE)
RF.model.ZC_test
round(importance(RF.model.ZC_test),3)
plotImportance(RF.model.ZC_test)
plotTrace(RF.model.ZC_test)
RF.model.ZC_test <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=10, proximity=FALSE)
plotTrace(RF.model.ZC_test)
plotImportance(RF.model.ZC_test)
round(importance(RF.model.ZC_test),3)
plotTrace(RF.model.ZC_test)
ftlist <- dir("data/", recursive=TRUE, full.names=TRUE, pattern="fulltrack")
for (ft in ftlist) {
df <- readRDS(ft)
assign(paste0("fulltrack", substr(ft, 15, 16)), df)
}
allDrifts <- rbind(fulltrack07, fulltrack08, fulltrack10, fulltrack12, fulltrack13, fulltrack14,
fulltrack16, fulltrack18, fulltrack19, fulltrack20, fulltrack21, fulltrack22, fulltrack23)
save(allDrifts, file = "allDrifts.rda")
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
load(file = allDrifts.rda)
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
load(file = "allDrifts.rda")
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
load(file = "allDrifts.rda")
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
# Load in main dataframe
load(file = "allDrifts.rda")
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
allDrifts$ZcPresence<-factor(ifelse(allDrifts$species=='ZC',1,0))
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
#covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
#                      'sst_mean','dist2slope','depth',
#                     'chlorophyll_mean','mldDepth'))
#more parameters
covariate.list<-list(c('ZcPresence','BB_20.24000','TOL_63','TOL_125','TOL_2000','TOL_5000',
'TOL_20000', 'curl_mean', 'bathy_slope', 'ssh_mean',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth', 'mldTemp', 'ttDepth',
'ttTemp', 'temp400', 'sal400'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=15000, sampsize=sampsizeZC, proximity=FALSE)
RanFor.model.ZC <- randomForest(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=10000, sampsize=sampsizeZC, proximity=FALSE)
RanFor.model.ZC
RanFor.model.ZC
round(importance(RanFor.model.ZC),3) #ranking of importance for each variable
plotTrace(RanFor.model.ZC)   #model stability w/number of trees (this should be flat!)
plotImpPreds(RanFor.model.ZC, DF.modelZC, "ZcPresence")  #distribution of predictors
plotPredictedProbs(RanFor.model.ZC)
plotImpPreds(RanFor.model.ZC, DF.modelZC, "ZcPresence")  #distribution of predictors
# Use random forest, not rfPermute
RanFor.model.ZC <- randomForest(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=20000, sampsize=sampsizeZC, proximity=FALSE)
RanFor.model.ZC
plotTrace(RanFor.model.ZC)   #model stability w/number of trees (this should be flat!)
sampsizeZC
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use random forest, not rfPermute
RanFor.model.ZC <- randomForest(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=30000, sampsize=sampsizeZC, proximity=FALSE)
RanFor.model.ZC
plotTrace(RanFor.model.ZC)   #model stability w/number of trees (this should be flat!)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use random forest, not rfPermute
RanFor.model.ZC <- randomForest(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=100000, sampsize=sampsizeZC, proximity=FALSE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use random forest, not rfPermute
RanFor.model.ZC <- randomForest(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=50000, sampsize=sampsizeZC, proximity=FALSE)
gc()
# create balanced sample size random forest model
#By ZC
RF.model.ZC <- rfPermute(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=15000, sampsize=sampsizeZC, proximity=FALSE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use random forest, not rfPermute
RanFor.model.ZC <- randomForest(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=50000, sampsize=sampsizeZC, proximity=FALSE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use random forest, not rfPermute
RanFor.model.ZC <- randomForest(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=40000, sampsize=sampsizeZC, proximity=FALSE)
RanFor.model.ZC
plotTrace(RanFor.model.ZC)   #model stability w/number of trees (this should be flat!)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use random forest, not rfPermute
RanFor.model.ZC <- randomForest(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=50000, sampsize=sampsizeZC, proximity=FALSE)
RanFor.model.ZC
plotTrace(RanFor.model.ZC)   #model stability w/number of trees (this should be flat!)
plotImportance(RanFor.model.ZC) #visualize importance
plotImpPreds(RanFor.model.ZC, DF.modelZC, "ZcPresence")  #distribution of predictors
plotPredictedProbs(RF.model.ZC)
plotPredictedProbs(RanFor.model.ZC)
round(importance(RanFor.model.ZC),3) #ranking of importance for each variable
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use random forest, not rfPermute
RanFor.model.ZC <- randomForest(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=60000, sampsize=sampsizeZC, proximity=FALSE)
gc()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use random forest, not rfPermute
RanFor.model.ZC <- randomForest(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=60000, sampsize=sampsizeZC, proximity=FALSE)
plotTrace(RanFor.model.ZC)   #model stability w/number of trees (this should be flat!)
#Use a Random Forest to identify most important variables
#in beaked and sperm whale presence
#Modified from Anne Simonis (7/11/2023)
#Required Packages
library(randomForest)
library(dplyr)
library(rfPermute)
# Load in main dataframe
load(file = "allDrifts.rda")
#Define response variable (presence/absence as 0/1)
#I suggest creating a variable for presence of each species, and then create a
#random forest model for each species
#Descriptive label for analysis
Dep<-'CCES_Zc'
# For ZC only
allDrifts$species<-as.factor(allDrifts$species) %>%
droplevels(c("BB", "BW43", "BW37V", "PM", "BWC"))
allDrifts$ZcPresence<-factor(ifelse(allDrifts$species=='ZC',1,0))
#List all variables you want to evaluate (I only included a few here,
#but I know you have more environmental and AIS parameters to add)
#covariate.list<-list(c('ZcPresence','TOL_125','TOL_2000','TOL_5000',
#                      'sst_mean','dist2slope','depth',
#                     'chlorophyll_mean','mldDepth'))
#more parameters
covariate.list<-list(c('ZcPresence','BB_20.24000','TOL_63','TOL_125','TOL_2000','TOL_5000',
'TOL_20000', 'curl_mean', 'bathy_slope', 'ssh_mean',
'sst_mean','dist2slope','depth',
'chlorophyll_mean','mldDepth', 'mldTemp', 'ttDepth',
'ttTemp', 'temp400', 'sal400'))
include.covars <- which(names(allDrifts) %in% covariate.list[[1]])
#make a text string of all covariates considered for a file name
string.covars.used <- paste0(names(allDrifts)[include.covars], sep="+", collapse="")
#Create a dataframe for the RF model
DF.modelZC <- na.omit(allDrifts)
# create balanced sample sizes of response for tree construction to
# avoid biases associated with imbalanced data
# For ZC only
sampsizeZC <- balancedSampsize(DF.modelZC$ZcPresence)
# set seed for reproducibility
set.seed(123)
RanFor.model.ZC <- randomForest(ZcPresence ~ ., data=DF.modelZC[,include.covars],
replace=FALSE, ntree=60000, sampsize=sampsizeZC, proximity=FALSE)
