#  mutate(dateTime = round_date(ymd_hms(.$dateTime),"20 minutes"))
# Drift 8: TOL
TOL_08 <- read_csv("data/CCES_08_1Hz_1s_TOL_2min.csv", show_col_types = FALSE) %>%
rename(dateTime = `yyyy-mm-ddTHH:MM:SSZ`) %>%
mutate(dateTime = round_date(ymd_hms(.$dateTime),"20 minutes"))
#write.csv(TOL_08, "TOL_08.csv", row.names=FALSE)
# Drift 10: Broadband
BB_10 <- read_csv("Data/CCES_10_1Hz_1s_BB_2min.csv", show_col_types = FALSE) %>%
rename(dateTime = `yyyy-mm-ddTHH:MM:SSZ`) %>%
mutate(dateTime = round_date(ymd_hms(.$dateTime),"20 minutes"))
# Drift 10: TOL
TOL_10 <- read_csv("data/CCES_10_1Hz_1s_TOL_2min.csv", show_col_types = FALSE) %>%
rename(dateTime = `yyyy-mm-ddTHH:MM:SSZ`) %>%
mutate(dateTime = round_date(ymd_hms(.$dateTime),"20 minutes"))
# Drift 10: Octave level
OL_10 <- read_csv("Data/CCES_10_1Hz_1s_OL_2min.csv", show_col_types = FALSE) %>%
rename(dateTime = `yyyy-mm-ddTHH:MM:SSZ`) %>%
mutate(dateTime = round_date(ymd_hms(.$dateTime),"20 minutes"))
##################
# Read in Tracks
##################
# Load raw rda file
load("data/CCES2018_DriftTracks_Modified_03Nov2022.rda")
# Read in tracks, filter out lost buoys 1,2,3,5,6,9,11
tracks <- AllTracks %>%
dplyr::select(-dist, -speed) %>%
mutate(dateTime = round_date(.$dateTime, "20 minutes")) %>%      # round to nearest 20 minutes, will create duplicated in the data
filter(!station %in% c('1','2','3','5','6','9','11')) %>%
rename(Longitude = long,                                 # Need these columns to specifically say this for ERDDAP matching
Latitude = lat,
UTC = dateTime)
# Filter by buoy 8 and 10
tracks_08 <- tracks %>% dplyr::filter(station == "8")
tracks_10 <- tracks %>% dplyr::filter(station == "10")
# Tracks on a map
tracks_sf <- tracks %>% # make tracks an sf object
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
tracks08sf <- tracks_08 %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
tracks10sf <- tracks_10 %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
##########################
# Read in whale detections
##########################
# Load raw RDA file
load("data/CCES2018_BW_Detections.rda")
# Change EventInfo object name to "whales"
whales <- EventInfo %>%
dplyr::select(-Project, -UID, -Id) %>%            # remove unnecessary columns
subset(species!= "?BW")                         # remove rows containing ?BW
BWsf <- whales %>% st_as_sf(coords = c("Longitude","Latitude"), crs=4326)   # whales as sf
# Drift 10 whales as sf
whales10_sf <- BWsf %>%
dplyr::filter(Deployment == "10")
#Drift 8 whales as sf
whales08_sf <- BWsf %>%
dplyr::filter(Deployment == "8")
# Drift 10 whales
whales10 <- whales %>%
dplyr::filter(Deployment == "10") %>%
mutate(dateTimeRound = round_date(.$StartTime, "20 minutes"))
# Drift 8 whales
whales8 <- whales %>%
dplyr::filter(Deployment == "8") %>%
mutate(dateTimeRound = round_date(.$StartTime, "20 minutes"))
whales_8_10sf <- BWsf %>%
dplyr::filter(Deployment == "8" | Deployment == "10")
View(left_join(track_08, whales8, by = join_by(closest(UTC >= StartDate))))
View(left_join(tracks_08, whales8, by = join_by(closest(UTC >= StartDate))))
View(left_join(tracks_08, whales8, by = join_by(closest(`UTC` >= `StartDate`))))
View(left_join(tracks_08, whales8, by = join_by(closest('UTC' >= 'StartDate'))))
View(left_join(tracks_08, whales8, by = join_by(closest(UTC >= StartTime))))
View(left_join(tracks_08, whales8, by = join_by(closest(UTC <= StartTime))))
View(left_join(tracks_08, whales8, by = join_by(closest(UTC > StartTime))))
View(left_join(tracks_08, whales8, by = join_by(closest(UTC < StartTime))))
# Sandbox
tracks_08[!duplicated(tracks_08$UTC),]
# Sandbox
View(tracks_08[!duplicated(tracks_08$UTC),])
# Sandbox
sb <- tracks_08[!duplicated(tracks_08$UTC),]
# Sandbox
sb <- tracks_08[!duplicated(tracks_08$UTC),]
sb
sb2 <- left_join(sb, whales8, by = join_by(closest(UTC < StartTime)))
sb2
View(sb2)
sb2 <- full_join(sb, whales8, by = join_by(closest(UTC < StartTime)))
View(sb2)
sb2 <- right_join(sb, whales8, by = join_by(closest(UTC < StartTime)))
View(sb2)
sb2 <- full_join(sb, whales8, by = join_by(closest(UTC < StartTime)))
View(sb2)
sb2 <- full_join(sb, whales8, by = join_by(closest(UTC < StartTime), UTC > EndTime))
View(sb2)
sb2 <- left_join(sb, whales8, by = join_by(closest(UTC < StartTime), UTC > EndTime))
View(sb2)
sb2 <- left_join(sb, whales8, by = join_by(closest(UTC > EndTime))
sb2 <- left_join(sb, whales8, by = join_by(closest(UTC >= EndTime)
)
)
View(sb2)
sb2 <- left_join(sb, whales8, by = join_by(closest(StartTime >= UTC)))
sb2 <- left_join(whales8, sb by = join_by(closest(StartTime >= UTC)))
sb2 <- left_join(whales8, sb, by = join_by(closest(StartTime >= UTC)))
View(sb2)
sb2 <- left_join(whales8, sb, by = join_by(closest(StartTime <= UTC)))
View(sb2)
sb3 <- left_join(whales8, sb, by = join_by(closest("dateTimeRound" <= UTC)))
sb3
View(sb3)
sb2=sb3
sb2 <- left_join(whales8, sb, by = join_by(closest(StartTime <= UTC)))
sb3 <- left_join(whales8, sb, by = join_by(closest("dateTimeRound" <= UTC)))
sb3==sb2
identical(sb2, sb3)
View(tracks)
# Read in tracks, filter out lost buoys 1,2,3,5,6,9,11
tracks <- AllTracks %>%
dplyr::select(-dist, -speed) %>%
mutate(dateTime = round_date(.$dateTime, "20 minutes")) %>%      # round to nearest 20 minutes, will create duplicated in the data
filter(!station %in% c('1','2','3','5','6','9','11')) %>%
rename(Longitude = long,                                 # Need these columns to specifically say this for ERDDAP matching
Latitude = lat,
UTC = dateTime) %>%
subset(!duplicated(.$c('UTC', 'station')))
# Read in tracks, filter out lost buoys 1,2,3,5,6,9,11
tracks <- AllTracks %>%
dplyr::select(-dist, -speed) %>%
mutate(dateTime = round_date(.$dateTime, "20 minutes")) %>%      # round to nearest 20 minutes, will create duplicated in the data
filter(!station %in% c('1','2','3','5','6','9','11')) %>%
rename(Longitude = long,                                 # Need these columns to specifically say this for ERDDAP matching
Latitude = lat,
UTC = dateTime) %>%
subset(.[!duplicated(.$c('UTC', 'station'))])
tracks <- tracks[!duplicated(tracks[c('UTC', 'station')]),]
tracks
View(tracks)
# Filter by buoy 8 and 10
tracks_08 <- tracks %>% dplyr::filter(station == "8")
tracks_10 <- tracks %>% dplyr::filter(station == "10")
# Tracks on a map
tracks_sf <- tracks %>% # make tracks an sf object
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
tracks08sf <- tracks_08 %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
tracks10sf <- tracks_10 %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
##########################
# Read in whale detections
##########################
# Load raw RDA file
load("data/CCES2018_BW_Detections.rda")
sb3 <- left_join(whales, tracks, by = join_by(closest("dateTimeRound" <= UTC)))
# Change EventInfo object name to "whales"
whales <- EventInfo %>%
dplyr::select(-Project, -UID, -Id) %>%            # remove unnecessary columns
subset(species!= "?BW")                         # remove rows containing ?BW
# Change EventInfo object name to "whales"
whales <- EventInfo %>%
dplyr::select(-Project, -UID, -Id) %>%            # remove unnecessary columns
subset(species!= "?BW") %>%                        # remove rows containing ?BW
mutate(dateTimeRound = round_date(.$StartTime, "20 minutes"))
sb3 <- left_join(whales, tracks, by = join_by(closest("dateTimeRound" <= UTC)))
# Change EventInfo object name to "whales"
whales <- EventInfo %>%
dplyr::select(-Project, -UID, -Id) %>%            # remove unnecessary columns
subset(species!= "?BW") %>%                        # remove rows containing ?BW
mutate(dateTimeRound = round_date(.$StartTime, "20 minutes"))
nrow(whales)
View(whales)
grp <- tracks %>% group_by(station)
head(grp)
sb3 <- left_join(whales, grp, by = join_by(station, closest("dateTimeRound" <= UTC)))
sb3 <- left_join(whales, tracks, by = join_by("Deployment", closest("dateTimeRound" <= UTC)))
sb3 <- left_join(whales, tracks, by = join_by(Deployment, closest("dateTimeRound" <= UTC)))
sb3 <- left_join(whales, tracks, by = join_by(c("Deployment"="station"), closest("dateTimeRound" <= UTC)))
# Change EventInfo object name to "whales"
whales <- EventInfo %>%
dplyr::select(-Project, -UID, -Id) %>%            # remove unnecessary columns
subset(species!= "?BW") %>%                        # remove rows containing ?BW
mutate(dateTimeRound = round_date(.$StartTime, "20 minutes")) %>%
rename(station = Deployment)
sb3 <- left_join(whales, tracks, by = join_by(station, closest("dateTimeRound" <= UTC)))
# Create common UTC field and remove unnecessary fields
whales <- left_join(whales, tracks, by = join_by(station, closest("dateTimeRound" <= UTC))) %>%
dplyr::select(-Latitude.y, -Longitude.y, -spotID, -minNumber, -maxNumber, -bestNumber)
# Read in, load, clean up, and wrangle raw data
# Look into https://bookdown.org/yihui/rmarkdown-cookbook/managing-projects.html for info on
# managing projects with multiple Rmds and scripts
###########################
# Required packages
###########################
library(tidyverse)
library(lubridate)
library(sf)
library(rerddap)
library(terra)
library(rnaturalearth)
library(mapproj)
library(raster)
library(PAMpal)
library(maptiles)
library(tmap)
library(spData)
library(tmaptools)
library(ggspatial)
library(here)
library(leaflet)
##########################
# Read in soundscape data, NEED TO MAKE THIS A FUNCTION
# look at http://ohi-science.org/data-science-training/programming.html#automation-with-for-loops for help on automation.
##########################
here()
#Remove global environment if needed
rm(list=ls())
# Set system time zone to UTC
Sys.setenv(TZ='UTC')
worldmap <- ne_countries(scale = 'medium', type = 'map_units',
returnclass = 'sf')
calif <- st_crop(worldmap,
xmin = 33.7,
xmax = 40,
ymin = -131,
ymax = -122)
calif <- st_transform(calif, 4326)
tmap_options(basemaps=c(Terrain = "Esri.WorldTerrain",
Imagery = "Esri.WorldImagery",
OceanBasemap = "Esri.OceanBasemap",
Topo="OpenTopoMap",
Ortho="GeoportailFrance.orthos"))
# Round to nearest 20 minutes, create dateTime data type
# Drift 8: Broadband
BB_08 <- read_csv("data/CCES_08_1Hz_1s_BB_2min.csv", show_col_types = FALSE) %>%
rename(dateTime = `yyyy-mm-ddTHH:MM:SSZ`) %>%
mutate(dateTime = round_date(ymd_hms(.$dateTime),"20 minutes"))
# Drift 8: Octave Level
#OL_08_csv <- read_csv("Data/CCES_08_1Hz_1s_OL_2min.csv",show_col_types = FALSE) %>%
#  rename(dateTime = `yyyy-mm-ddTHH:MM:SSZ`) %>%
#  mutate(dateTime = round_date(ymd_hms(.$dateTime),"20 minutes"))
# Drift 8: TOL
TOL_08 <- read_csv("data/CCES_08_1Hz_1s_TOL_2min.csv", show_col_types = FALSE) %>%
rename(dateTime = `yyyy-mm-ddTHH:MM:SSZ`) %>%
mutate(dateTime = round_date(ymd_hms(.$dateTime),"20 minutes"))
#write.csv(TOL_08, "TOL_08.csv", row.names=FALSE)
# Drift 10: Broadband
BB_10 <- read_csv("Data/CCES_10_1Hz_1s_BB_2min.csv", show_col_types = FALSE) %>%
rename(dateTime = `yyyy-mm-ddTHH:MM:SSZ`) %>%
mutate(dateTime = round_date(ymd_hms(.$dateTime),"20 minutes"))
# Drift 10: TOL
TOL_10 <- read_csv("data/CCES_10_1Hz_1s_TOL_2min.csv", show_col_types = FALSE) %>%
rename(dateTime = `yyyy-mm-ddTHH:MM:SSZ`) %>%
mutate(dateTime = round_date(ymd_hms(.$dateTime),"20 minutes"))
# Drift 10: Octave level
OL_10 <- read_csv("Data/CCES_10_1Hz_1s_OL_2min.csv", show_col_types = FALSE) %>%
rename(dateTime = `yyyy-mm-ddTHH:MM:SSZ`) %>%
mutate(dateTime = round_date(ymd_hms(.$dateTime),"20 minutes"))
##################
# Read in Tracks
##################
# Load raw rda file
load("data/CCES2018_DriftTracks_Modified_03Nov2022.rda")
# Read in tracks, filter out lost buoys 1,2,3,5,6,9,11
tracks <- AllTracks %>%
dplyr::select(-dist, -speed) %>%
mutate(dateTime = round_date(.$dateTime, "20 minutes")) %>%      # round to nearest 20 minutes, will create duplicated in the data
filter(!station %in% c('1','2','3','5','6','9','11')) %>%
rename(Longitude = long,                                 # Need these columns to specifically say this for ERDDAP matching
Latitude = lat,
UTC = dateTime)
tracks <- tracks[!duplicated(tracks[c('UTC', 'station')]),]    # Remove duplicates
# Filter by buoy 8 and 10
tracks_08 <- tracks %>% dplyr::filter(station == "8")
tracks_10 <- tracks %>% dplyr::filter(station == "10")
# Tracks on a map
tracks_sf <- tracks %>% # make tracks an sf object
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
tracks08sf <- tracks_08 %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
tracks10sf <- tracks_10 %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
##########################
# Read in whale detections
##########################
# Load raw RDA file
load("data/CCES2018_BW_Detections.rda")
# Change EventInfo object name to "whales"
whales <- EventInfo %>%
dplyr::select(-Project, -UID, -Id) %>%            # remove unnecessary columns
subset(species!= "?BW") %>%                        # remove rows containing ?BW
mutate(dateTimeRound = round_date(.$StartTime, "20 minutes")) %>%   # Round to nearest 20 min
rename(station = Deployment)                     # Rename for common join column name next
# Create common UTC field and remove unnecessary fields
whales <- left_join(whales, tracks, by = join_by(station, closest("dateTimeRound" <= UTC))) %>%
dplyr::select(-Latitude.y, -Longitude.y, -spotID, -minNumber, -maxNumber, -bestNumber)
BWsf <- whales %>% st_as_sf(coords = c("Longitude","Latitude"), crs=4326)   # whales as sf
View(whales)
source("~/GitHub/thesis/01_readin.R", echo=TRUE)
# Drift 10 whales as sf
whales10_sf <- BWsf %>%
dplyr::filter(station == "10")
#Drift 8 whales as sf
whales08_sf <- BWsf %>%
dplyr::filter(station == "8")
# Drift 10 whales
whales10 <- whales %>%
dplyr::filter(station == "10") %>%
# Drift 8 whales
whales8 <- whales %>%
dplyr::filter(station == "8") %>%
whales_8_10sf <- BWsf %>%
dplyr::filter(station == "8" | station == "10")
BWsf <- whales %>% st_as_sf(coords = c("Longitude.x","Latitude.x"), crs=4326)   # whales as sf
# Drift 10 whales
whales10 <- whales %>%
dplyr::filter(station == "10") %>%
# Drift 8 whales
whales8 <- whales %>%
dplyr::filter(station == "8") %>%
whales_8_10sf <- BWsf %>%
dplyr::filter(station == "8" | station == "10")
# Fix this section!!
# Drift 08
tracks_SS_08 <- left_join(tracks_08, BB_08, by = c("UTC" = "dateTime")) %>%   # join tracks with broadband metrics
left_join(., TOL_08, by = c("UTC"= "dateTime")) %>%                        # join tracks with TOL metrics
# left_join(., whales8, by = join_by(c("UTC" = "StartDate), )) #%>%   # join whales
mutate(BWpresence = if_else(is.na(nClicks), 0, 1)) %>%             # Add column to specify BW presence (1) or absence (0)
dplyr::select(UTC, spotID, Latitude.x, Longitude.x, station, `BB_20-24000`,
TOL_63, TOL_125, TOL_2000, TOL_5000, TOL_20000, species, BWpresence) %>%  # keep necessary columns
rename(Latitude = Latitude.x,
Longitude = Longitude.x)
View(tracks_08)
View(tracks)
trk_whale <- left_join(tracks, whales, by = "UTC")
trk_whale
trk_whale <- merge(tracks, whales, by = c("station","UTC"))
trk_whale
View(trk_whale)
View(EventInfo)
trk_whale <- right_join(tracks, whales, by = c("station","UTC"))
trk_whale
View(trk_whale)
trk_whale <- left_join(tracks, whales, by = c("station","UTC"))
View(trk_whale)
## NEED TO CHANGE STATION 15 TO STATION 14 HERE
whales$station[whales$station == 15] <- 14
# Create common UTC field and remove unnecessary fields
whales <- left_join(whales, tracks, by = join_by(station, closest("dateTimeRound" <= UTC))) %>%
dplyr::select(-Latitude.y, -Longitude.y, -spotID, -minNumber, -maxNumber, -bestNumber)
# Create common UTC field and remove unnecessary fields
whales <- left_join(whales, tracks, by = join_by(station, closest("dateTimeRound" <= UTC))) %>%
dplyr::select(-Latitude.x, -Longitude.x, -spotID, -minNumber, -maxNumber, -bestNumber)
# Load raw RDA file
load("data/CCES2018_BW_Detections.rda")
# Change EventInfo object name to "whales"
whales <- EventInfo %>%
dplyr::select(-Project, -UID, -Id) %>%            # remove unnecessary columns
subset(species!= "?BW") %>%                        # remove rows containing ?BW
mutate(dateTimeRound = round_date(.$StartTime, "20 minutes")) %>%   # Round to nearest 20 min
rename(station = Deployment)                    # Rename for common join column name next
## NEED TO CHANGE STATION 15 TO STATION 14 HERE
whales$station[whales$station == 15] <- 14
# Create common UTC field and remove unnecessary fields
whales <- left_join(whales, tracks, by = join_by(station, closest("dateTimeRound" <= UTC))) %>%
dplyr::select(-Latitude.x, -Longitude.x, -spotID, -minNumber, -maxNumber, -bestNumber)
# Load raw RDA file
load("data/CCES2018_BW_Detections.rda")
# Change EventInfo object name to "whales"
whales <- EventInfo %>%
dplyr::select(-Project, -UID, -Id) %>%            # remove unnecessary columns
subset(species!= "?BW") %>%                        # remove rows containing ?BW
mutate(dateTimeRound = round_date(.$StartTime, "20 minutes")) %>%   # Round to nearest 20 min
rename(station = Deployment)                    # Rename for common join column name next
## NEED TO CHANGE STATION 15 TO STATION 14 HERE
whales$station[whales$station == 15] <- 14
# Create common UTC field and remove unnecessary fields
whales <- left_join(whales, tracks, by = join_by(station, closest("dateTimeRound" <= UTC))) %>%
dplyr::select(-Latitude.y, -Longitude.y, -spotID, -minNumber, -maxNumber, -bestNumber)
trk_whale <- left_join(tracks, whales, by = c("station","UTC"))
View(trk_whale)
head(TOL_08)
#Show duplicates
trk_whale[!duplicated(trk_whale[c('UTC', 'station')]),]
#Show duplicates
View(trk_whale[!duplicated(trk_whale[c('UTC', 'station')]),])
#Show duplicates
View(trk_whale[duplicated(trk_whale[c('UTC', 'station')]),])
#Show duplicates
View(trk_whale[duplicated(trk_whale[c('UTC', 'station', 'species')]),])
#Show duplicates
View(trk_whale[duplicated(trk_whale[c('UTC', 'station', 'species', 'spotID')]),])
trk_whale <- left_join(tracks, whales, by = c("station","UTC"))
View(trk_whale) #this has duplicate detections per track point - is it ok to narrow down to "presence/absence?" and remove duplicates?
#Show duplicates
View(trk_whale[!duplicated(trk_whale[c('UTC', 'station', 'species')]),])
#Show duplicates
trk_whale <- trk_whale[!duplicated(trk_whale[c('UTC', 'station', 'species')]),]
View(trk_whale)
View(trk_whale[!duplicated(trk_whale[c('UTC', 'station', 'species')]),])
View(trk_whale[duplicated(trk_whale[c('UTC', 'station', 'species')]),])
anti_join(trk_whale, tracks)
anti_join(tracks, trk_whale)
semi_join(tracks, trk_whale)
head(BB_08)
# Fix this section!! If tracks and whales are already combined, I may only need to add soundscape
# Drift 08
tracks_SS_08 <- left_join(trk_whale, BB_08, by = c("UTC" = "dateTime")) %>%   # join tracks with broadband metrics
left_join(., TOL_08, by = c("UTC"= "dateTime")) %>%                        # join tracks with TOL metrics
# left_join(., whales8, by = join_by(c("UTC" = "StartDate), )) #%>%   # join whales
mutate(BWpresence = if_else(is.na(nClicks), 0, 1)) %>%             # Add column to specify BW presence (1) or absence (0)
dplyr::select(UTC, spotID, Latitude.x, Longitude.x, station, `BB_20-24000`,
TOL_63, TOL_125, TOL_2000, TOL_5000, TOL_20000, species, BWpresence) %>%  # keep necessary columns
rename(Latitude = Latitude.x,
Longitude = Longitude.x)
View(tracks_SS_08)
trk_whale <- left_join(tracks, whales, by = c("station","UTC"))
View(trk_whale) #this has duplicate detections per track point - is it ok to narrow down to "presence/absence?" and remove duplicates?
#Show duplicates
trk_whale <- trk_whale[!duplicated(trk_whale[c('UTC', 'station', 'species')]),]
View(trk_whale)
library(tidyverse)
#########
# AIS
#########
#For 09-03-18 to 09-11-18
rawAIS <- read_csv("Data/AIS_090318_091118.csv", show_col_types = FALSE)
# Filter by vessels over 100m in length, remove unnecessary columns
AIS <- rawAIS %>%
filter(Length >= 100) %>%
dplyr::select(-SOG,-COG, -CallSign, -IMO, -Cargo, -Draft, -Status)
AIS_sf <- AIS %>%
st_as_sf(coords = c("LON", "LAT"), crs=4326, remove=F)
tracks08sf <- tracks_08 %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
trk <- tracks08sf  # Shorten the object name to trk
pois <- st_transform(trk, crs = 4326)    # Specify a crs
pts_buff <- st_buffer(pois, dist = 10000)  # Buffer all points in trk to 10 km (10000m)
buff <- st_transform(pts_buff, crs = 4326)  # Specify crs for new buffer
tmap_mode("plot")
tm_shape(buff) + tm_symbols(col = "blue", border.col = NA) +
tm_shape(trk) + tm_dots(col = "red")
### Crop full AIS to 10km buffer around drift 8 ###
AIS_crop <- st_crop(x = AIS_sf, y = pts_buff)
plot(AIS_crop)
?st_crop
### Crop full AIS to 10km buffer around drift 8 ###
AIS_crop <- st_crop(x = AIS_sf, y = buff)
plot(AIS_crop)
# Intersect buffer with AIS. Starting this on first 10 rows to see how slowly it goes.
inters <- st_intersection(buff, AIS_crop[1:10,])
head(inters)
AIS_crop[1:10,]
# Intersect buffer with AIS. Starting this on first 10 rows to see how slowly it goes.
inters <- st_intersection(buff, AIS_crop[11:20,])
head(inters)\
head(inters)
?st_intersection
intersect <- st_intersects(buff, AIS_crop)
View(intersect)
?lengths
lgth <- lengths(st_intersects(buff, AIS_crop)) > 0
head(lgth)
View(lgth)
lgth
# Intersect buffer with AIS. Starting this on first 10 rows to see how slowly it goes.
inters <- st_intersection(buff, AIS_crop[99:116,])
View(inters)
plot(inters)
# Intersect buffer with AIS. Starting this on first 10 rows to see how slowly it goes.
inters <- st_intersection(buff, AIS_crop[99:140,])
View(inters)
#Required Packages
library(tidyverse)
library(sf)
#########
# AIS
#########
# Need to add more AIS dates in data folder
AISlist <- list.files(path = paste0("data/"), pattern = "AIS_", recursive = TRUE)
for (v in AISlist) {
Adata <- read_csv(paste0("data/", v), show_col_types = FALSE) %>%
filter(Length >= 100) %>%                  # Filter out vessels over 100m in length
dplyr::select(-SOG,-COG, -CallSign, -IMO, -Cargo, -Draft, -Status) %>%  #Remove unnecessary columns
mutate(variable = paste0(substr(v, 16, 17), substr(v, 6, 7)))
assign(paste0("AIS_", substr(v, 5, 10)), Adata)
}
AIS_sf <- AIS %>%
st_as_sf(coords = c("LON", "LAT"), crs=4326, remove=F)
##################################
trk8 <- tracks %>%
dplyr::filter(station == "8") %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
pois <- st_transform(trk8, crs = 4326)    # Specify a crs
pts_buff <- st_buffer(pois, dist = 10000)  # Buffer all points in trk to 10 km (10000m)
buff <- st_transform(pts_buff, crs = 4326)  # Specify crs for new buffer
### Crop full AIS to 10km buffer around drift 8 ###
AIS_crop <- st_crop(x = AIS_sf, y = buff)
st_intersection_faster <- function(x,y,...){
#faster replacement for st_intersection(x, y,...)
y_subset <-
st_intersects(x, y) %>%
unlist() %>%
unique() %>%
sort() %>%
{y[.,]}
st_intersection(x, y_subset,...)
}
inters2 <- st_intersection(buff, AIS_crop[141:200,])
inters2 <- st_intersection_faster(buff, AIS_crop[141:200,])
AIS_crop[141:200,]
buff
inters3 <- st_intersection_faster(buff, AIS_crop[201:300,])
