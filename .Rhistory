lgth <- lengths(st_intersects(buff, AIS_crop)) > 0
#Another way to view with TRUE/FALSE if AIS points fall within buffer
intersect <- st_intersects(buff, AIS_crop)
View(intersect)
View(AIS)081018
View(AIS_081018)
inters <- st_intersection_faster(buff, AIS_crop[1:140,])
View(inters)
plot(AIS_crop)
ggplot() + geom_sf(data = AIS_crop,color = "red")
ggplot() + geom_sf(data = AIS_crop,color = "red") + geom_sf(data = buff,color = "blue")
ggplot() + geom_sf(data = AIS_crop,color = "red") + geom_sf(data = buff,color = "blue")
?st_within
ggplot() + geom_sf(data = buff[lgth,] ,color = "red")
st_crosses(buff, AIS_crop)
?join_by
crp <- st_crop(buff, AIS_crop)
View(crp)
ggplot() + geom_sf(data = crp,color = "red") + geom_sf(data = buff,color = "blue")
ggplot() + geom_sf(data = crp,color = "red") + geom_sf(data = buff,color = "blue")
ggplot() + geom_sf(data = crp,color = "red")
crp <- st_crop(AIS_crop, buff)
ggplot() + geom_sf(data = crp,color = "red")
ggplot() + geom_sf(data = AIS_crop,color = "red")
ggplot() + geom_sf(data = buff,color = "red")
?st_join
crp <- tmaptools::crop_shape(AIS_crop, buff, polygon = TRUE)
?St_clip
?st_clip
AIS_crop[buff,]
AIS_within_buff <- AIS_crop[buff,]
View(AIS_within_buff)
ggplot() + geom_sf(data = AIS_within_buff, color = "red")
head(trk8)
?join_by
by <- join_by(c("UTC", "BaseDateTime"), closest(UTC >= BaseDateTime))
by <- join_by(c("UTC", "BaseDateTime"), within(UTC >= BaseDateTime))
AIS_sf <- AIS_091218 %>%
st_as_sf(coords = c("LON", "LAT"), crs=4326, remove=F) %>%
rename(UTC = BaseDateTime)
by <- join_by(UTC, within(UTC >= UTC))
AIS_sf <- AIS_091218 %>%
st_as_sf(coords = c("LON", "LAT"), crs=4326, remove=F)
by <- join_by(VesselName, within(UTC >= UTC))
by <- join_by(VesselName, closest(UTC == UTC))
by <- join_by(VesselName, closest(UTC >= BaseDateTime))
left_join(trk8, AIS_within_buff, by)
st_join(trk8, AIS_within_buff, by)
left_join(as.data.frame(trk8), as.data.frame(AIS_within_buff), by)
?full_join
by <- join_by(closest(UTC >= BaseDateTime))
left_join(as.data.frame(trk8), as.data.frame(AIS_within_buff), by)
trk_AIS <- left_join(as.data.frame(trk8), as.data.frame(AIS_within_buff), by)
ggplot() + geom_sf(data = trk_AIS, color = "red")
plot(trk_AIS)
View(trk_AIS)
#Required Packages
library(tidyverse)
library(sf)
# Function
# Speeding up st_intersection (from https://github.com/r-spatial/sf/issues/801)
st_intersection_faster <- function(x,y,...){
#faster replacement for st_intersection(x, y,...)
y_subset <-
st_intersects(x, y) %>%
unlist() %>%
unique() %>%
sort() %>%
{y[.,]}
st_intersection(x, y_subset,...)
}
#########
# AIS
#########
# Need to add more AIS dates in data folder
AISlist <- list.files(path = paste0("data-raw/"), pattern = "AIS_", recursive = TRUE)
for (v in AISlist) {
Adata <- read_csv(paste0("data-raw/", v), show_col_types = FALSE) %>%
filter(Length >= 100) %>%                  # Filter out vessels over 100m in length
dplyr::select(-SOG,-COG, -CallSign, -IMO, -Cargo, -Draft, -Status) %>%  #Remove unnecessary columns
mutate(variable = paste0(substr(v, 16, 17), substr(v, 6, 7)))
assign(paste0("AIS_", substr(v, 5, 10)), Adata)
}
AIS_sf <- AIS_091218 %>%
st_as_sf(coords = c("LON", "LAT"), crs=4326, remove=F)
##################################
# Create 10 km buffer around buoys (taken from M. McKenna's code)
# Should be malleable for each buoy's number to easily plug in.
##################################
trk8 <- tracks %>%
dplyr::filter(station == "8") %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
pois <- st_transform(trk8, crs = 4326)    # Specify a crs
pts_buff <- st_buffer(pois, dist = 10000)  # Creates 10 km buffer around buoy points 10 km (10000m)
buff <- st_transform(pts_buff, crs = 4326)  # Specify crs for new buffer
### Crop full AIS to 10km buffer around drift 8 ###
AIS_crop <- st_crop(x = AIS_sf, y = buff)
# Intersect buffer with AIS. Starting this on first 10 rows to see how slowly it goes.
## FIX ME
#inters <- st_intersection(buff, AIS_crop[1:140,])
#Another way to view AIS points that fall within buffer. DOES NOT consider time.
AIS_within_buff <- AIS_crop[buff,]
by <- join_by(closest(UTC >= BaseDateTime))
trk_AIS <- left_join(as.data.frame(trk8), as.data.frame(AIS_within_buff), by)
#inters <- st_intersection_faster(buff, AIS_crop[1:140,])
#inters2 <- st_intersection_faster(buff, AIS_crop[141:200,])
#inters3 <- st_intersection_faster(buff, AIS_crop[201:300,])
ggplot() + geom_sf(data = trk_AIS, color = "red")
trk_AIS_sf <- trk_AIS %>% st_as_sf(coords = c("LON", "LAT"), crs=4326, remove=F)
View(trk_AIS)
trk_AIS_sf <- trk_AIS %>% st_as_sf(coords = c("Longitude", "Latitude"), crs=4326, remove=F)
ggplot() + geom_sf(data = trk_AIS_sf, color = "red")
trk_AIS_sf <- trk_AIS %>% st_as_sf(coords = c("Longitude", "Latitude"), crs=4326, remove=F)
ggplot() + geom_sf(data = trk_AIS_sf, color = "red")
crs(trk_AIS_sf)
trk_AIS_sf <- trk_AIS %>% st_sf(coords = c("Longitude", "Latitude"), crs=4326, remove=F)
trk_AIS_sf <- trk_AIS %>% st_as_sf(coords = c("Longitude", "Latitude"), crs=4326, remove=F)
?crs
trk_AIS_sf <- trk_AIS %>% st_as_sf(coords = c("Longitude", "Latitude"), crs=4326, remove=F) %>%
st_set_crs(4326)
ggplot() + geom_sf(data = trk_AIS_sf, color = "red")
st_crs(trk_AIS_sf)
ggplot() + geom_sf(data = trk_AIS_sf, color = "red")
class(trk_AIS)
class(trk_AIS_sf)
plot(trk_AIS_sf)
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
trk_AIS_sf <- trk_AIS %>% st_as_sf(coords = c("Longitude", "Latitude"), crs=projcrs, remove=F) %>%
st_set_crs(4326)
ggplot() + geom_sf(data = trk_AIS_sf, color = "red")
trk_AIS_sf <- trk_AIS %>% st_as_sf(coords = c("Longitude", "Latitude"), crs=projcrs, remove=F)# %>%
ggplot() + geom_sf(data = trk_AIS_sf, color = "red")
plot(trk_AIS_sf)
plot(trk_AIS_sf$BaseDateTime)
plot(trk_AIS_sf$geometry.x)
trk_AIS_sf <- st_transform(trk_AIS_sf, crs = 4326)
ggplot() + geom_sf(data = trk_AIS_sf, color = "red")
ggplot() + geom_point(trk_AIS_sf)
ggplot() + geom_point(trk_AIS_sf, aes())
ggplot() + geom_point(aes(), trk_AIS_sf
)
ggplot() + geom_sf(aes(), trk_AIS_sf)
ggplot() + geom_sf(data = AIS_within_buff, color = "red")
ggplot() + geom_sf(data = buff) + geom_sf(data = AIS_within_buff, color = "red")
p <- ggplot() + geom_sf(data = buff) + geom_sf(data = AIS_within_buff, color = "red")
p <- ggplot() + geom_sf(data = buff) + geom_sf(data = AIS_within_buff, color = "red")
anim <- p +
transition_reveal(along = dateTime)+
ease_aes('linear')+
shadow_wake(0.1) +
ggtitle("Date: {frame_along}")
librry(gganimate)
library(gganimate)
anim <- p +
transition_reveal(along = dateTime)+
ease_aes('linear')+
shadow_wake(0.1) +
ggtitle("Date: {frame_along}")
animate(anim, nframes = 70, fps = 3)
anim <- p +
transition_reveal(along = UTC)+
ease_aes('linear')+
shadow_wake(0.1) +
ggtitle("Date: {frame_along}")
animate(anim, nframes = 70, fps = 3)
anim
?transition_reveal
p <- ggplot() + geom_point(data = buff) + geom_point(data = AIS_within_buff, color = "red")
anim <- p +
transition_reveal(along = UTC)+
ease_aes('linear')+
shadow_wake(0.1) +
ggtitle("Date: {frame_along}")
animate(anim, nframes = 70, fps = 3)
head(buff)
p <- ggplot() + geom_point(data = buff, mapping = aes(x=Longitude,y=Latitude)) +
geom_point(data = AIS_within_buff, mapping = aes(x=LON,y=LAT, group = VesselName)color = "red")
p <- ggplot() + geom_point(data = buff, mapping = aes(x=Longitude,y=Latitude)) +
geom_point(data = AIS_within_buff, mapping = aes(x=LON,y=LAT, group = VesselName), color = "red")
anim <- p +
transition_reveal(along = UTC)+
ease_aes('linear')+
shadow_wake(0.1) +
ggtitle("Date: {frame_along}")
animate(anim, nframes = 70, fps = 3)
animate(anim, nframes = 80, fps = 4)
p <- ggplot() +
geom_point(data = AIS_within_buff, mapping = aes(x=LON,y=LAT, group = VesselName), color = "red")
anim <- p +
transition_reveal(along = UTC)+
ease_aes('linear')+
shadow_wake(0.1) +
ggtitle("Date: {frame_along}")
animate(anim, nframes = 80, fps = 4)
anim <- p +
transition_reveal(along = BaseDateTime)+
ease_aes('linear')+
shadow_wake(0.1) +
ggtitle("Date: {frame_along}")
animate(anim, nframes = 80, fps = 4)
anim <- p +
transition_reveal(along = BaseDateTime)+
ease_aes('linear')+
#shadow_wake(0.1) +
ggtitle("Date: {frame_along}")
animate(anim, nframes = 80, fps = 4)
animate(anim, nframes = 180, fps = 3)
p
p <- ggplot() + geom_point(data = buff, mapping = aes(x=LON,y=LAT, group = VesselName)) +
geom_point(data = AIS_within_buff, mapping = aes(x=LON,y=LAT, group = VesselName), color = "red")
p
p <- ggplot() + geom_point(data = buff, mapping = aes(x=Longitude,y=Latitude, group = VesselName)) +
geom_point(data = AIS_within_buff, mapping = aes(x=LON,y=LAT, group = VesselName), color = "red")
p
p <- ggplot() + geom_point(data = buff, mapping = aes(x=Longitude,y=Latitude)) +
geom_point(data = AIS_within_buff, mapping = aes(x=LON,y=LAT, group = VesselName), color = "red")
p
p <- ggplot() + geom_polygon(data = buff, mapping = aes(x=Longitude,y=Latitude)) +
geom_point(data = AIS_within_buff, mapping = aes(x=LON,y=LAT, group = VesselName), color = "red")
p
p <- ggplot() + geom_point(data = buff, mapping = aes(x=Longitude,y=Latitude)) +
geom_point(data = AIS_within_buff, mapping = aes(x=LON,y=LAT, group = VesselName), color = "red")
p
View(buff)
p <- ggplot() + geom_sf(data = buff, mapping = aes(x=Longitude,y=Latitude)) +
geom_point(data = AIS_within_buff, mapping = aes(x=LON,y=LAT, group = VesselName), color = "red")
p
View(buff[[6]][[1]])
f <- AIS_within_buff[buff,]
f
f <- buff[AIS_within_buff,]
f
plot(f)
View(f)
inner_join(buff, AIS_within_buff, by = c("UTC", "BaseDateTime"))
inner_join(buff, as.data.frame(AIS_within_buff), by = c("UTC", "BaseDateTime"))
by <- join_by(closest(UTC >= BaseDateTime))
inner_join(buff, as.data.frame(AIS_within_buff), by)
View(inner_join(buff, as.data.frame(AIS_within_buff), by))
d <- inner_join(buff, as.data.frame(AIS_within_buff), by)
d <- d[!duplicated(d[c('BaseDateTime', 'VesselName')]),]
View(d)
d <- inner_join(buff, as.data.frame(AIS_within_buff), by)
e <- d[!duplicated(d[c('BaseDateTime', 'VesselName')]),]
View(e)
e <- d[duplicated(d[c('BaseDateTime', 'VesselName')]),]
View(e)
e <- d[!duplicated(d[c('BaseDateTime')]),]
View(e)
which(duplicated(d))
which(duplicated(BaseDateTime(d)))
which(duplicated(e(BaseDateTime)))
which(duplicated(e))
d <- full_join(buff, as.data.frame(AIS_within_buff), by)
View(d)
?st_within
st_within(AIS_crop, pois, dist = 10000)
st_within(AIS_crop, pois)
st_is_within_distance(AIS_crop, pois, dist = 10000)
st_distance(AIS_crop, pois, dist = 10000)
?st_distance
st_distance(AIS_crop, pois, dist_fun = 10000)
?dist
install.packages("remotes")
remotes::install_github("skgrange/gissr")
library(skgrange/gissr)
skgrange/gissr::sp_distance(AIS_crop, pois, unit = "km")
gissr::sp_distance(AIS_crop, pois, unit = "km")
#Required Packages
library(tidyverse)
library(sf)
library(gganimate)
#install.packages("remotes")
#remotes::install_github("skgrange/gissr")
#library(skgrange/gissr)
# Function
# Speeding up st_intersection (from https://github.com/r-spatial/sf/issues/801)
st_intersection_faster <- function(x,y,...){
#faster replacement for st_intersection(x, y,...)
y_subset <-
st_intersects(x, y) %>%
unlist() %>%
unique() %>%
sort() %>%
{y[.,]}
st_intersection(x, y_subset,...)
}
sp_distance <- function(sp_1, sp_2, features = FALSE, unit = "m") {
# Check the projection systems
if (!identical(sp_projection(sp_1), sp_projection(sp_2))) {
stop("Projection systems are not identical.", call. = FALSE)
}
# Do the test
x <- rgeos::gDistance(sp_1, sp_2, byid = features)
# Transform units
if (unit == "km") x <- x / 1000
return(x)
}
#########
# AIS
#########
# Need to add more AIS dates in data folder
AISlist <- list.files(path = paste0("data-raw/"), pattern = "AIS_", recursive = TRUE)
for (v in AISlist) {
Adata <- read_csv(paste0("data-raw/", v), show_col_types = FALSE) %>%
filter(Length >= 100) %>%                  # Filter out vessels over 100m in length
dplyr::select(-SOG,-COG, -CallSign, -IMO, -Cargo, -Draft, -Status) %>%  #Remove unnecessary columns
mutate(variable = paste0(substr(v, 16, 17), substr(v, 6, 7)))
assign(paste0("AIS_", substr(v, 5, 10)), Adata)
}
AIS_sf <- AIS_091218 %>%
st_as_sf(coords = c("LON", "LAT"), crs=4326, remove=F)
##################################
# Create 10 km buffer around buoys (taken from M. McKenna's code)
# Should be malleable for each buoy's number to easily plug in.
##################################
trk8 <- tracks %>%
dplyr::filter(station == "8") %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
pois <- st_transform(trk8, crs = 4326)    # Specify a crs
pts_buff <- st_buffer(pois, dist = 10000)  # Creates 10 km buffer around buoy points 10 km (10000m)
buff <- st_transform(pts_buff, crs = 4326)  # Specify crs for new buffer
### Crop full AIS to 10km buffer around drift 8 ###
AIS_crop <- st_crop(x = AIS_sf, y = buff)
#Another way to view AIS points that fall within buffer. DOES NOT consider time.
AIS_within_buff <- AIS_crop[buff,]
View(sp_distance(AIS_crop, pois, unit = "km"))
# Sp_projection function
sp_projection <- function(sp) {
# Warning suppression is needed for a new rgdal version
# `CRS object has comment, which is lost in output`
suppressWarnings(proj4string(sp))
}
View(sp_distance(AIS_crop, pois, unit = "km"))
#install.packages("remotes")
#remotes::install_github("skgrange/gissr")
library(gissr)
proj4string <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
View(sp_distance(AIS_crop, pois, unit = "km"))
#install.packages("remotes")
#remotes::install_github("skgrange/gissr")
devtools::install_github("skgrange/gissr")
library(gissr)
View(sp_distance(AIS_crop, pois, unit = "km"))
View(sp_distance(as.data.frame(AIS_crop), as.data.frame(pois), unit = "km"))
?sp_distance
rgeos::gWithinDistance(AIS_crop, pois, dist = 10000)
st_set_geometry(AIS_crop, value = NULL)
st_set_geometry(pois, value = NULL)
View(sp_distance(AIS_crop, pois, unit = "km"))
#Required Packages
library(tidyverse)
library(sf)
library(gganimate)
#install.packages("remotes")
#remotes::install_github("skgrange/gissr")
devtools::install_github("skgrange/gissr")
library(gissr)
# Function
# Speeding up st_intersection (from https://github.com/r-spatial/sf/issues/801)
st_intersection_faster <- function(x,y,...){
#faster replacement for st_intersection(x, y,...)
y_subset <-
st_intersects(x, y) %>%
unlist() %>%
unique() %>%
sort() %>%
{y[.,]}
st_intersection(x, y_subset,...)
}
#########
# AIS
#########
# Need to add more AIS dates in data folder
AISlist <- list.files(path = paste0("data-raw/"), pattern = "AIS_", recursive = TRUE)
for (v in AISlist) {
Adata <- read_csv(paste0("data-raw/", v), show_col_types = FALSE) %>%
filter(Length >= 100) %>%                  # Filter out vessels over 100m in length
dplyr::select(-SOG,-COG, -CallSign, -IMO, -Cargo, -Draft, -Status) %>%  #Remove unnecessary columns
mutate(variable = paste0(substr(v, 16, 17), substr(v, 6, 7)))
assign(paste0("AIS_", substr(v, 5, 10)), Adata)
}
AIS_sf <- AIS_091218 %>%
st_as_sf(coords = c("LON", "LAT"), crs=4326, remove=F)
##################################
# Create 10 km buffer around buoys (taken from M. McKenna's code)
# Should be malleable for each buoy's number to easily plug in.
##################################
trk8 <- tracks %>%
dplyr::filter(station == "8") %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
## code to prepare in `tracks` dataset goes here
library(tidyverse)
# Load raw rda file
load("data-raw/CCES2018_DriftTracks_Modified_03Nov2022.rda")
# Read in tracks, filter out lost buoys (1,2,3,5,6,9,11) and corrupted buoys (4,17)
tracks <- AllTracks %>%
dplyr::select(-dist, -speed) %>%
mutate(dateTime = round_date(.$dateTime, "20 minutes")) %>%      # round to nearest 20 minutes, will create duplicated in the data
filter(!station %in% c('1','2','3','4','5','6','9','11', '17')) %>%
rename(Longitude = long,                                 # Need these columns to specifically say this for ERDDAP matching
Latitude = lat,
UTC = dateTime)
tracks <- tracks[!duplicated(tracks[c('UTC', 'station')]),]    # Remove duplicates
# Save as RDS
saveRDS(tracks, 'tracks.rda')
# Filter by buoy
#tracks_08 <- tracks %>% dplyr::filter(station == "8")
track4 <- AllTracks %>% dplyr::filter(station == "4")
##################################
# Create 10 km buffer around buoys (taken from M. McKenna's code)
# Should be malleable for each buoy's number to easily plug in.
##################################
load("data-raw/tracks.rda")
##################################
# Create 10 km buffer around buoys (taken from M. McKenna's code)
# Should be malleable for each buoy's number to easily plug in.
##################################
load("data-raw/tracks.rds")
##################################
# Create 10 km buffer around buoys (taken from M. McKenna's code)
# Should be malleable for each buoy's number to easily plug in.
##################################
load("data/tracks.rds")
# Save as RDS
saveRDS(tracks, 'data-raw/tracks.rda')
##################################
# Create 10 km buffer around buoys (taken from M. McKenna's code)
# Should be malleable for each buoy's number to easily plug in.
##################################
load("data-raw/tracks.rda")
##################################
# Create 10 km buffer around buoys (taken from M. McKenna's code)
# Should be malleable for each buoy's number to easily plug in.
##################################
readRDS("data-raw/tracks.rda")
##################################
# Create 10 km buffer around buoys (taken from M. McKenna's code)
# Should be malleable for each buoy's number to easily plug in.
##################################
tracks <- readRDS("data-raw/tracks.rda")
trk8 <- tracks %>%
dplyr::filter(station == "8") %>%
st_as_sf(coords= c("Longitude", "Latitude"), crs=4326, remove=F)
pois <- st_transform(trk8, crs = 4326)    # Specify a crs
pts_buff <- st_buffer(pois, dist = 10000)  # Creates 10 km buffer around buoy points 10 km (10000m)
buff <- st_transform(pts_buff, crs = 4326)  # Specify crs for new buffer
### Crop full AIS to 10km buffer around drift 8 ###
AIS_crop <- st_crop(x = AIS_sf, y = buff)
View(sp_distance(AIS_crop, pois, unit = "km"))
View(sp_distance(AIS_091218, pois, unit = "km"))
rgeos::gWithinDistance(AIS_crop, pois, dist = 10000)
AIS_crop <- as_Spatial(AIS_crop)
pois <- as_Spatial(pois)
View(sp_distance(AIS_crop, pois, unit = "km"))
z <- sp_distance(AIS_crop, pois, unit = "km")
class(z)
z <- sp_distance(AIS_crop, pois, features = TRUE, unit = "km")
z
data_places <- AIS_crop@data
data_places$distance <- sp_distance(AIS_crop, pois, features = TRUE, unit = "km")
View(data_places)
#Another way to view AIS points that fall within buffer. DOES NOT consider time.
AIS_within_buff <- AIS_crop[buff,]
### Crop full AIS to 10km buffer around drift 8 ###
AIS_crop <- st_crop(x = AIS_sf, y = buff)
#Another way to view AIS points that fall within buffer. DOES NOT consider time.
AIS_within_buff <- AIS_crop[buff,]
AIS_within_buff <- as_Spatial(AIS_within_buff)
data_places <- pois@data
data_places$distance <- sp_distance(AIS_within_buff, pois, features = TRUE, unit = "km")
View(data_places)
p <- ggplot() + geom_sf(data = buff, mapping = aes(x=Longitude,y=Latitude)) +
geom_point(data = AIS_within_buff, mapping = aes(x=LON,y=LAT, group = VesselName), color = "red")
rgeos::gWithinDistance(AIS_crop, pois, dist = 10000)
AIS_crop <- as_Spatial(AIS_crop)
pois <- as_Spatial(pois)
rgeos::gWithinDistance(AIS_crop, pois, dist = 10000)
rgeos::gWithinDistance(AIS_crop, pois, features = TRUE, dist = 10000)
sp_distance(AIS_within_buff[1], pois, unti = "km")
sp_distance(AIS_within_buff[1], pois, unit = "km")
sp_distance(AIS_within_buff[2], pois, unit = "km")
sp_distance(AIS_within_buff[3], pois, unit = "km")
sp_distance(AIS_within_buff[4], pois, unit = "km")
AIS_within_buff[4]
AIS_within_buff[4,]
sp_distance(AIS_within_buff[4,], pois, unit = "km")
sp_distance(AIS_within_buff[5,], pois, unit = "km")
sp_distance(AIS_within_buff[6,], pois, unit = "km")
sp_distance(AIS_within_buff[7,], pois, unit = "km")
sp_distance(AIS_within_buff[7,], pois, unit = "m")
sp_distance(AIS_within_buff[7,], pois, unit = "km")
sp_distance(AIS_within_buff[7,], pois[1], unit = "km")
sp_distance(AIS_within_buff[7,], pois[2], unit = "km")
sp_distance(AIS_within_buff[7,], pois[3], unit = "km")
sp_distance(AIS_within_buff[7,], pois[3,], unit = "km")
sp_distance(AIS_within_buff[7,], pois[4,], unit = "km")
sp_distance(AIS_within_buff[7,], pois[5,], unit = "km")
pois[5,]
AIS_within_buff[7,]
sp_distance(AIS_within_buff[7,], pois[5,], unit = "km")
geosphere::distHaversine(AIS_within_buff[7,], pois[5,])
?geosphere::distHaversine
(geosphere::distHaversine(AIS_within_buff[7,], pois[5,]))/1000
#
(geosphere::distHaversine(AIS_within_buff[8,], pois[5,]))/1000
#
(geosphere::distHaversine(AIS_within_buff[9,], pois[5,]))/1000
#
(geosphere::distHaversine(AIS_within_buff[9,], pois))/1000
#
(geosphere::distHaversine(AIS_within_buff[9:20,], pois))/1000
